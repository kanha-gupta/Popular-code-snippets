// implement minimum spanning tree using Primâ€™s algorithm

#include<iostream>
#include<iomanip>
using namespace std;

class Graph
{
	private:
		int n;
		int * V;
		int ** G;
		public:
		Graph(int num)
		{
			n=num;
			V=new int[num];
			G=new int *[num];
			for(int i=0;i<n;i++)
			{
				G[i]=new int[num];
			}
			
		}
		void getInput()
		{
			cout<<""<<n<<" vertices in graph are as follows:";
			for(int i=0;i<n;i++)
			{
				cout<<i<<" , ";
				V[i]=i;
			}
			cout<<endl;
			char choice;
			cout<<"Press 'y' if edge is present between two vertices , else 'n'"<<endl;
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<n;j++)
				{
					if(i==j)
					{
						G[i][j]=999;
						continue;
					}
					
					cout<<"Is there an edge between "<<V[i]<<" and "<<V[j]<<" in the graph:";
					cin>>choice;
					if(choice=='y'|| choice=='Y')
					{
						cout<<"Enter weight of edge between "<<V[i]<<" and "<<V[j]<<" in the graph:";
						cin>>G[i][j];
					}
					else
					{
						G[i][j]=999;
					}
					
				}
			}
		}
		void prims()
		{
			int u,v, mincost=0;
			int min=999;
			int mstedges=1;
			bool visited[n];
			for(int i=0;i<n;i++)
			{
				visited[i]=false;
			}
			cout<<"\n";
			cout<<"The MST edges are:"<<endl;
			visited[0]=true;
			while(mstedges<n)
			{
				min=999;
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<n;j++)
				{
					if(G[i][j]<min)
					{
						if(visited[i])
						{
							continue;
						}
						else
						{
							min=G[i][j];
							u=i;
							v=j;
						}
					}
				}
			}
			if(visited[u]==false || visited[v]==false)
			{
				
				cout<<(mstedges++)<<" Edge("<<V[u]<<","<<V[v]<<") Cost:"<<min<<endl;;
				mincost+=min;
				visited[v]=true;
				
				
			}
			G[u][v]=999;
			G[v][u]=999;
			
		}
		cout<<"Total Cost of minimum spanning tree:"<<mincost<<endl;
		}
	
		
};
int main()
{
		cout<<"Enter number of vertices present in graph:";
	int n;
	cin>>n;
	Graph g(n);
	g.getInput();
	g.prims();
	return 0;
}
